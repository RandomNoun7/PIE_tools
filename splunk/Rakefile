require 'puppet_litmus/rake_tasks' if Bundler.rubygems.find_name('puppet_litmus').any?
require 'puppetlabs_spec_helper/rake_tasks'
require 'puppet-syntax/tasks/puppet-syntax'
require 'puppet_blacksmith/rake_tasks' if Bundler.rubygems.find_name('puppet-blacksmith').any?
require 'puppet-strings/tasks' if Bundler.rubygems.find_name('puppet-strings').any?
require 'pry-byebug'
require 'awesome_print'
require 'colorize'
require 'yaml'

PuppetLint.configuration.send('disable_relative')

def get_pe_master()
  provision_hash = YAML.load_file('./inventory.yaml')
  provision_hash['groups'][1]['targets'][0]['uri']
end

def get_splunk_server()
  provision_hash = YAML.load_file('./inventory.yaml')
  provision_hash['groups'][1]['targets'][1]['uri']
end

def module_path()
  File.join(Dir.pwd, 'spec', 'fixtures', 'modules')
end

def aws_creds_setup()
  creds = ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', 'AWS_REGION', 'AWS_KEY_NAME']
  creds.each do |cred|
    unless ENV[cred]
      puts "#{cred} not set. Export it to continue.".red
      exit
    end
  end
end

def find_targets(inventory_hash, targets)
  targets = if targets.nil?
              inventory_hash.to_s.scan(%r{uri"=>"(\S*)"}).flatten
            else
              [targets]
            end
  targets
end

def install_pe(target_node_name)
  inventory_hash = YAML.load_file('inventory.yaml')
  target_nodes = find_targets(inventory_hash, target_node_name)
  if target_nodes.empty?
    puts 'No targets found'
    exit 0
  end
  puts 'install_pe'
  include BoltSpec::Run
  Rake::Task['spec_prep'].invoke
  config_data = { 'modulepath' => File.join(Dir.pwd, 'spec', 'fixtures', 'modules') }

  puts 'Setting up parameters'

  pe_release = 2019.2
  pe_latest_cmd = "curl http://enterprise.delivery.puppetlabs.net/#{pe_release}/ci-ready/LATEST"
  pe_latest = run_command(pe_latest_cmd, target_nodes, config: config_data, inventory: inventory_hash)
  pe_latest_string = pe_latest[0]['result']['stdout'].delete("\n")
  pe_file_name = "puppet-enterprise-#{pe_latest_string}-el-7-x86_64"
  tar_file = "#{pe_file_name}.tar"
  download_url = "http://enterprise.delivery.puppetlabs.net/#{pe_release}/ci-ready/#{tar_file}"

  puts 'Initiating PE download'

  # Download PE
  download_pe_cmd = "wget -q #{download_url}"
  run_command(download_pe_cmd, target_nodes, config: config_data, inventory: inventory_hash)

  puts 'PE successfully downloaded, running installer (this may take 5 or so minutes, please be patient)'

  # Install PE
  untar_cmd = "tar xvf #{tar_file}"
  run_command(untar_cmd, target_nodes, config: config_data, inventory: inventory_hash)
  puts run_command("cd #{pe_file_name} && 1 | ./puppet-enterprise-installer", target_nodes, config: nil, inventory: inventory_hash)[0]['result']['stdout']

  puts 'Autosigning Certificates'

  # Set Autosign
  autosign_cmd = "echo 'autosign = true' >> /etc/puppetlabs/puppet/puppet.conf"
  run_command(autosign_cmd, target_nodes, config: config_data, inventory: inventory_hash)

  puts 'Finishing installation with a Puppet Agent run'

  run_command('puppet agent -t', target_nodes, config: config_data, inventory: inventory_hash)

  puts 'PE Installation is now complete'
end


task :deprovision_vmpooler do
  Rake::Task['litmus:tear_down']
  system "rm -f ./inventory.yaml"
end

task :provision_vmpooler do
  puts "Puppet Splunk Enterprise Test Framework".bold
  puts "Provisioning the Puppet Master".green
  Rake::Task['clean'].invoke
  Rake::Task['litmus:provision'].invoke('vmpooler', 'centos-7-x86_64')
  Rake::Task['litmus:provision'].reenable
  puts "Provisioning the Splunk Server".green
  Rake::Task['litmus:provision'].invoke('vmpooler', 'centos-7-x86_64')

  puppet_master = get_pe_master
  puts "Puppet Master #{puppet_master}".blue
  splunk_server = get_splunk_server
  puts "Splunk Server #{splunk_server}".blue

  puts "Install Puppet Enterprise on the Puppet Master   [#{puppet_master}]".green
  install_pe(puppet_master)
  puts "Installing the Puppet Agent on the Splunk server [#{splunk_server}]".green
  Rake::Task['litmus:install_agent'].invoke('puppet6', splunk_server)
  Rake::Task['litmus:install_agent'].reenable
  Rake::Task['litmus:install_agent'].invoke('puppet6', puppet_master)
end

task :provision_aws do
  system "rm -f ~/.puppetlabs/bolt/inventory.yaml"
  puts "Puppet Splunk Enterprise Test Framework".bold
  puts "Provisioning the Puppet Master".green
  aws_creds_setup()
  system "bundle exec bolt plan run splunk::provision_aws --modulepath #{module_path}"
  system "cp ~/.puppetlabs/bolt/inventory.yaml ."

end
task :configure_aws do
  puppet_master = get_pe_master
  puts "Puppet Master #{puppet_master}".blue
  splunk_server = get_splunk_server
  puts "Splunk Server #{splunk_server}".blue
  system "bundle exec bolt plan run splunk::configure_splunk_in_aws --modulepath #{module_path} splunk_server=#{splunk_server} pe_master=#{puppet_master} splunk_token_name=testo --debug --trace"

end

task :deprovision_aws do
  puts "Puppet Splunk Enterprise Test Framework".bold
  aws_creds_setup()
  system "bundle exec bolt plan run splunk::deprovision_aws --modulepath #{module_path}"
  system "rm -f inventory.yaml ~/.puppetlabs/bolt/inventory.yaml"
end

task :configure_vmpooler do
  puts "Configuring the Splunk framework".bold
  puppet_master = get_pe_master
  puts "Puppet Master #{puppet_master}".blue
  splunk_server = get_splunk_server
  puts "Splunk Server #{splunk_server}".blue
  puts "Run splunk::configure_splunk".green
  system "bundle exec bolt task run --modulepath #{module_path} splunk::install_puppetfile --nodes localhost puppetfile='./puppetfile'"
  system "bundle exec bolt plan run --modulepath #{module_path} splunk::configure_splunk splunk_server=#{splunk_server} pe_master=#{puppet_master} splunk_token_name=testo --debug"
  puts "splunk::configure_splunk complete".green
end

task :inject_vmpooler do
  puppet_master = get_pe_master
  system "bundle exec bolt plan run --modulepath #{module_path}  splunk::inject server=#{puppet_master} --debug --trace"
end

task :inject_aws do
  puppet_master = get_pe_master
  system "bundle exec bolt plan run --modulepath #{module_path}  splunk::inject_aws server=#{puppet_master} --debug --trace"
end

task :verify_vmpooler do
  puppet_master = get_pe_master
  splunk_server = get_splunk_server
  system "bundle exec bolt plan run --modulepath #{module_path}  splunk::verify splunk_server=#{splunk_server} search_host=#{puppet_master} --debug"
end

task :verify_aws do
  puppet_master = get_pe_master
  splunk_server = get_splunk_server
  system "bundle exec bolt plan run --modulepath #{module_path}  splunk::verify_aws splunk_server=#{splunk_server} search_host=#{puppet_master} --debug"
end

task :splunk_server do
  puts "Splunk Master #{get_splunk_server}".bold
end

task :puppet_master do
  puts "Puppet Master #{get_pe_master}".bold
end

